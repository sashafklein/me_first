require 'spec_helper'

describe MeFirst do
  it 'has a version number' do
    expect(MeFirst::VERSION).not_to be nil
  end

  describe 'autogenerated methods' do

    before do
      0.upto(4).each do |n|
        FakeModel.create( name: n, order: n)
      end

      expect_order %w( 0 1 2 3 4 )
    end

    after do 
      FakeModel.destroy_all
    end

    describe "scopes" do
      it "creates a by_{att} and by_reverse_{att} scope" do
        expect( FakeModel.by_order.pluck(:name) ).to eq %w( 0 1 2 3 4 )
        expect( FakeModel.by_reverse_order.pluck(:name) ).to eq %w( 4 3 2 1 0 )
      end 
    end

    describe "movement methods" do
      describe "set_{att}!" do

        let(:m) { FakeModel.by_order.last }

        it "takes an arbitrary position and sets that order" do
          m.set_order!(0)
          expect_order %w( 4 0 1 2 3 )
          m.set_order!(1)
          expect_order %w( 0 4 1 2 3 )
          m.set_order!(3)
          expect_order %w( 0 1 2 4 3 )
          expect( FakeModel.by_order.pluck(:order) ).to eq( [0,1,2,3,4] ) # Collapses order back 
        end

        it "can handle out of bounds orders correctly" do
          m.set_order!( 500 )
          expect_order %w( 0 1 2 3 4 )
          m.set_order!( -1 )
          expect_order %w( 4 0 1 2 3 )
          expect( FakeModel.by_order.pluck(:order) ).to eq( [0,1,2,3,4] ) # Collapses order back 
        end
      end

      describe "move_{att}_to_beginning! (or end)" do
        it "does what it says it does" do
          m = FakeModel.find_by(order: 2)
          m.move_order_to_beginning!
          expect_order %w( 2 0 1 3 4 )
          m.move_order_to_end!
          expect_order %w( 0 1 3 4 2 )
        end
      end

      describe "move_{att}_up! and move_{att}_down!" do

        let(:m) { FakeModel.find_by(order: 2) }

        it "moves arbitrary distances" do
          m.move_order_up!(1)
          expect_order %w( 0 1 3 2 4 )
          m.move_order_down!(2)
          expect_order %w( 0 2 1 3 4 )
        end

        it "handles ignores movement beyond bounds" do
          m.move_order_up!(5)
          expect_order %w( 0 1 3 4 2 )
          expect( FakeModel.by_order.pluck(:order) ).to eq( [0,1,2,3,4] ) # Collapses order back 
          m.move_order_down!(6)
          expect_order %w( 2 0 1 3 4 )
        end
      end
    end
  end

  def expect_order(names)
    expect( FakeModel.by_order.pluck(:name) ).to eq names
  end
end
